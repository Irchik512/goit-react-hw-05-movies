{"version":3,"file":"static/js/244.a4371c7d.chunk.js","mappings":"+PAKaA,EAAU,WACrB,OAA0BC,EAAAA,EAAAA,IAAkBC,EAAAA,IAApCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAEd,OADAC,QAAQC,IAAIH,IAEV,gCACGC,IAAW,SAACG,EAAA,EAAD,IACXJ,GAAQA,EAAKK,OAAS,GACrB,wBACGL,EAAKM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACR,UAACC,EAAD,YACE,wBAAKF,KACL,uBAAIC,MAFUF,QAMlB,S,SClBGG,E,OAAYC,GAAAA,GAAH,iD,+JCwBTC,EAAkB,SAAAC,GAC7B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOd,EAAP,KAAae,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOb,EAAP,KAAgBe,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcL,EAAMM,IAAI,SADhB,wCAId,2FACEH,GAAW,GADb,mBAGuBI,EAAAA,EAAAA,IAAmBF,GAH1C,OAGUlB,EAHV,OAIIe,EAAQf,GAJZ,gDAMIqB,EAAAA,GAAAA,MAAY,kDANhB,yBAQIL,GAAW,GARf,6EAJc,sBAETE,GAFS,mCAedI,KACC,CAACT,IACG,CAAEZ,QAAAA,EAASD,KAAAA,IAGPF,EAAoB,SAAAyB,GAC/B,OAAwBT,EAAAA,EAAAA,UAAS,MAAjC,eAAOd,EAAP,KAAae,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOb,EAAP,KAAgBe,EAAhB,KACQQ,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAP,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACED,GAAW,GADb,kBAGwBO,EAAQC,GAHhC,UAIyB,KADfE,EAHV,QAIcrB,OAJd,yCAKaH,QAAQyB,SALrB,OAOIZ,EAAQW,GAPZ,kDASIL,EAAAA,GAAAA,MAAY,6CAThB,yBAWIL,GAAW,GAXf,8EADc,uBAAC,WAAD,wBAedY,KACC,CAACL,EAASC,IACN,CAAEvB,QAAAA,EAASD,KAAAA,EAAMwB,QAAAA,K,kLCtE1BK,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAG,mCAQF,SAAeV,EAAtB,+CAAO,OAAP,oBAAO,WAAkCF,GAAlC,yFACkBW,IAAAA,IAAA,+BACGC,EADH,4DAC0DZ,IAF5E,cACCa,EADD,OAICC,EAASD,EAAS/B,KAAKiC,QAJxB,kBAMED,GANF,kEASA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCV,GAAjC,yFACkBK,IAAAA,IAAA,gBAAmBL,EAAnB,oBAAsCM,IADxD,cACCC,EADD,gBAEeA,EAAS/B,KAFxB,cAEC0B,EAFD,yBAGEA,GAHF,kEAMA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA0BX,GAA1B,yFACkBK,IAAAA,IAAA,gBAAmBL,EAAnB,4BAA8CM,IADhE,cACCC,EADD,gBAEcA,EAAS/B,KAAKoC,KAF5B,cAECA,EAFD,yBAGEA,GAHF,kEAMA,SAAerC,EAAtB,+CAAO,OAAP,oBAAO,WAA4ByB,GAA5B,yFACkBK,IAAAA,IAAA,gBAAmBL,EAAnB,4BAA8CM,IADhE,cACCC,EADD,gBAEiBA,EAAS/B,KAAKiC,QAF/B,cAECI,EAFD,yBAGEA,GAHF","sources":["components/Reviews/Reviews.jsx","components/Reviews/Reviews.styled.jsx","hooks/hooks.js","moviesApi/moviesApi.js"],"sourcesContent":["import { movieReviews } from 'moviesApi';\nimport Loader from 'components/Loader/Loader';\nimport { RevieItem } from 'components/Reviews';\nimport { useFetchMovieInfo } from 'hooks';\n\nexport const Reviews = () => {\n  const { data, loading } = useFetchMovieInfo(movieReviews);\n  console.log(data);\n  return (\n    <>\n      {loading && <Loader />}\n      {data && data.length > 0 ? (\n        <ul>\n          {data.map(({ id, author, content }) => (\n            <RevieItem key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </RevieItem>\n          ))}\n        </ul>\n      ) : null}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const RevieItem = styled.li`\n  text-align: justify;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchTrendingMovies, fetchMoviesOnQuery } from 'moviesApi';\nimport { toast } from 'react-toastify';\n\nexport const useFetchMovies = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function getTrendingMovies() {\n      setLoading(true);\n      try {\n        const data = await fetchTrendingMovies(1);\n        setItems(data);\n      } catch (error) {\n        toast.error('The resource could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getTrendingMovies();\n  }, []);\n  return { items, loading };\n};\n\nexport const useFetchByQuery = query => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const searchQuery = query.get('query');\n    if (!searchQuery) return;\n\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const data = await fetchMoviesOnQuery(searchQuery);\n        setData(data);\n      } catch (error) {\n        toast.error('The resource you requested could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovies();\n  }, [query]);\n  return { loading, data };\n};\n\nexport const useFetchMovieInfo = dataAPI => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      setLoading(true);\n      try {\n        const movie = await dataAPI(movieId);\n        if (movie.length === 0) {\n          return console.error();\n        }\n        setData(movie);\n      } catch (error) {\n        toast.error('The resource you requested not exist yet.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieDetails();\n  }, [dataAPI, movieId]);\n  return { loading, data, movieId };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = `6c934d67464856a6476afafcb7e85695`;\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const movies = response.data.results;\n  return movies;\n}\n\nexport async function fetchMoviesOnQuery(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  const movies = response.data.results;\n\n  return movies;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = await axios.get(`movie/${movieId}?api_key=${KEY}`);\n  const movie = await response.data;\n  return movie;\n}\n\nexport async function movieCasts(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  const cast = await response.data.cast;\n  return cast;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  const reviews = await response.data.results;\n  return reviews;\n}\n"],"names":["Reviews","useFetchMovieInfo","movieReviews","data","loading","console","log","Loader","length","map","id","author","content","RevieItem","styled","useFetchByQuery","query","useState","setData","setLoading","useEffect","searchQuery","get","fetchMoviesOnQuery","toast","getMovies","dataAPI","movieId","useParams","movie","error","getMovieDetails","axios","KEY","response","movies","results","fetchMovieDetails","movieCasts","cast","reviews"],"sourceRoot":""}