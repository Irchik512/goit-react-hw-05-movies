{"version":3,"file":"static/js/714.b393e004.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","hooks/hooks.js","moviesApi/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RevieItem = styled.li`\n  text-align: justify;\n`;\n","import { movieReviews } from 'moviesApi';\nimport { RevieItem } from 'components/Reviews';\nimport { useFetchMovieInfo } from 'hooks';\n\nconst Reviews = () => {\n  const { data } = useFetchMovieInfo(movieReviews);\n  return (\n    <>\n      {data && data.length > 0 ? (\n        <ul>\n          {data.map(({ id, author, content }) => (\n            <RevieItem key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </RevieItem>\n          ))}\n        </ul>\n      ) : null}\n    </>\n  );\n};\nexport default Reviews;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchTrendingMovies, fetchMoviesOnQuery } from 'moviesApi';\nimport { toast } from 'react-toastify';\n\nexport const useFetchMovies = () => {\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    async function getTrendingMovies() {\n      try {\n        const data = await fetchTrendingMovies(1);\n        setItems(data);\n      } catch (error) {\n        toast.error('The resource could not be found.');\n      }\n    }\n    getTrendingMovies();\n  }, []);\n  return { items };\n};\n\nexport const useFetchByQuery = query => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const searchQuery = query.get('query');\n    if (!searchQuery) return;\n\n    async function getMovies() {\n      try {\n        const data = await fetchMoviesOnQuery(searchQuery);\n        setData(data);\n      } catch (error) {\n        toast.error('The resource you requested could not be found.');\n      }\n    }\n    getMovies();\n  }, [query]);\n  return { data };\n};\n\nexport const useFetchMovieInfo = dataAPI => {\n  const [data, setData] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      try {\n        const movie = await dataAPI(movieId);\n        if (movie.length === 0) {\n          return console.error();\n        }\n        setData(movie);\n      } catch (error) {\n        toast.error('The resource you requested not exist yet.');\n      }\n    }\n    getMovieDetails();\n  }, [dataAPI, movieId]);\n  return { data, movieId };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = `6c934d67464856a6476afafcb7e85695`;\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const movies = response.data.results;\n  return movies;\n}\n\nexport async function fetchMoviesOnQuery(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  const movies = response.data.results;\n\n  return movies;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = await axios.get(`movie/${movieId}?api_key=${KEY}`);\n  const movie = await response.data;\n  return movie;\n}\n\nexport async function movieCasts(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  const cast = await response.data.cast;\n  return cast;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  const reviews = await response.data.results;\n  return reviews;\n}\n"],"names":["RevieItem","styled","data","useFetchMovieInfo","movieReviews","length","map","id","author","content","useFetchMovies","useState","items","setItems","useEffect","fetchTrendingMovies","toast","getTrendingMovies","useFetchByQuery","query","setData","searchQuery","get","fetchMoviesOnQuery","getMovies","dataAPI","movieId","useParams","movie","console","error","getMovieDetails","axios","KEY","response","movies","results","fetchMovieDetails","movieCasts","cast","reviews"],"sourceRoot":""}