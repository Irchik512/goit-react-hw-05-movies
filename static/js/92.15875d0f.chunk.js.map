{"version":3,"file":"static/js/92.15875d0f.chunk.js","mappings":"uUAIaA,EAAW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,UACpC,OACE,2BACE,SAAC,KAAD,WACE,gBACEC,IAAKH,EACLC,IACU,OAARA,EAAA,UAAkBG,GAAlB,yCAA8DH,QAIpE,4BACE,wBAAKD,KACL,uCAAeE,YCTVG,EAAO,WAClB,OAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEH,GAAW,GADb,mBAGwBI,EAAAA,EAAAA,IAAWH,GAHnC,OAGUI,EAHV,OAIIP,EAAaO,GAJjB,gDAMIC,EAAAA,GAAAA,MAAY,kDANhB,yBAQIN,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdO,KACC,CAACN,KAGF,gCACGF,IAAW,SAACS,EAAA,EAAD,IACXX,IACC,SAACY,EAAD,UACGZ,EAAUa,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAActB,EAA1B,EAA0BA,KAAME,EAAhC,EAAgCA,UAAhC,OACb,SAACH,EAAD,CAEEC,KAAMA,EACNC,IAAKqB,EACLpB,UAAWA,GAHNmB,Y,SCjCNF,E,OAAWI,GAAAA,GAAH,6I,oFCAN,SAASL,IACtB,OACE,4BACE,SAAC,IAAD,CAAcM,MAAM,SADtB,S,kICFSC,EAASF,EAAAA,GAAAA,IAAH,mIAQNG,EAAQH,EAAAA,GAAAA,IAAH,mLAYLI,EAAaJ,EAAAA,GAAAA,GAAH,oK,0MCpBvBK,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAG,mCAEF,SAAeC,IAAtB,+B,aAAO,O,oBAAA,sGACkBF,IAAAA,IAAA,qCAAwCC,IAD1D,cACCE,EADD,OAECC,EAASD,EAASE,KAAKC,QAFxB,kBAGEF,GAHF,kEAcA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,yFACkBR,IAAAA,IAAA,+BACGC,EADH,4DAC0DO,IAF5E,cACCL,EADD,OAICC,EAASD,EAASE,KAAKC,QAJxB,kBAMEF,GANF,kEASA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiC1B,GAAjC,yFACkBiB,IAAAA,IAAA,gBAAmBjB,EAAnB,oBAAsCkB,IADxD,cACCE,EADD,gBAEeA,EAASE,KAFxB,cAEClB,EAFD,yBAGEA,GAHF,kEAMA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAA0BH,GAA1B,yFACkBiB,IAAAA,IAAA,gBAAmBjB,EAAnB,4BAA8CkB,IADhE,cACCE,EADD,gBAEcA,EAASE,KAAKK,KAF5B,cAECA,EAFD,yBAGEA,GAHF,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4B5B,GAA5B,yFACkBiB,IAAAA,IAAA,gBAAmBjB,EAAnB,4BAA8CkB,IADhE,cACCE,EADD,gBAEiBA,EAASE,KAAKC,QAF/B,cAECM,EAFD,yBAGEA,GAHF,oE","sources":["components/FotoCard/FotoCard.jsx","components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","components/Loader/Loader.jsx","components/MovieInfo/MovieInfo.styled.jsx","moviesApi/moviesApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport NoImg from 'helpers/ImageNotFound.jpg';\nimport { Thumb } from 'components/MovieInfo/MovieInfo.styled';\n\nexport const FotoCard = ({ name, src, character }) => {\n  return (\n    <li>\n      <Thumb>\n        <img\n          alt={name}\n          src={\n            src === null ? `${NoImg}` : `https://image.tmdb.org/t/p/w300${src}`\n          }\n        />\n      </Thumb>\n      <div>\n        <h3>{name}</h3>\n        <p>Character: {character}</p>\n      </div>\n    </li>\n  );\n};\n\nFotoCard.propTypes = {\n  src: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { movieCasts } from 'moviesApi';\nimport Loader from 'components/Loader/Loader';\nimport { CastList } from 'components/Cast';\nimport { FotoCard } from 'components/FotoCard';\n\nexport const Cast = () => {\n  const [movieCast, setMovieCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      setLoading(true);\n      try {\n        const movie = await movieCasts(movieId);\n        setMovieCast(movie);\n      } catch (error) {\n        toast.error('The resource you requested could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {movieCast && (\n        <CastList>\n          {movieCast.map(({ cast_id, profile_path, name, character }) => (\n            <FotoCard\n              key={cast_id}\n              name={name}\n              src={profile_path}\n              character={character}\n            />\n          ))}\n        </CastList>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 0;\n`;\n","import PacmanLoader from 'react-spinners/PacmanLoader';\n\nexport default function Loader() {\n  return (\n    <div>\n      <PacmanLoader color=\"grey\" />;\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  text-align: justify;\n  @media screen and (min-width: 768px) {\n    display: flex;\n    gap: 15px;\n  }\n`;\n\nexport const Thumb = styled.div`\n  width: 300px;\n  height: 450px;\n  margin: auto;\n  object-fit: contain;\n  & img {\n    width: inherit;\n    height: auto;\n    overflow: hidden;\n  }\n`;\n\nexport const MovieTitle = styled.h1`\n  @media screen and (max-width: 767px) {\n    text-align: center;\n  }\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n  }\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = `6c934d67464856a6476afafcb7e85695`;\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const movies = response.data.results;\n  return movies;\n}\n\n// export async function fetchApiConfig() {\n//   const response = await axios.get(\n//     `https://api.themoviedb.org/3/configuration?api_key=${KEY}`\n//   );\n//   const config = response;\n//   console.log(config);\n// }\n\nexport async function fetchMoviesOnQuery(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  const movies = response.data.results;\n\n  return movies;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = await axios.get(`movie/${movieId}?api_key=${KEY}`);\n  const movie = await response.data;\n  return movie;\n}\n\nexport async function movieCasts(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  const cast = await response.data.cast;\n  return cast;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  const reviews = await response.data.results;\n  return reviews;\n}\n"],"names":["FotoCard","name","src","character","alt","NoImg","Cast","useState","movieCast","setMovieCast","loading","setLoading","movieId","useParams","useEffect","movieCasts","movie","toast","getMovieDetails","Loader","CastList","map","cast_id","profile_path","styled","color","Wraper","Thumb","MovieTitle","axios","KEY","fetchTrendingMovies","response","movies","data","results","fetchMoviesOnQuery","searchQuery","fetchMovieDetails","cast","movieReviews","reviews"],"sourceRoot":""}