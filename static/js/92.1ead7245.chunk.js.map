{"version":3,"file":"static/js/92.1ead7245.chunk.js","mappings":"0PAIaA,EAAW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,UACpC,OACE,2BACE,SAAC,KAAD,WACE,gBACEC,IAAKH,EACLC,IACU,OAARA,EAAA,UAAkBG,GAAlB,yCAA8DH,QAIpE,4BACE,wBAAKD,KACL,uCAAeE,Y,oBCXVG,EAAO,WAClB,OAA0BC,EAAAA,EAAAA,IAAkBC,EAAAA,IAApCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAEd,OADAC,QAAQC,IAAIH,IAEV,gCACGC,IAAW,SAACG,EAAA,EAAD,IACXJ,IACC,SAACK,EAAD,UACGL,EAAKM,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAchB,EAA1B,EAA0BA,KAAME,EAAhC,EAAgCA,UAAhC,OACR,SAACH,EAAD,CAEEC,KAAMA,EACNC,IAAKe,EACLd,UAAWA,GAHNa,Y,SCdNF,E,OAAWI,GAAAA,GAAH,6I,kICARC,EAASD,EAAAA,GAAAA,IAAH,mIAQNE,EAAQF,EAAAA,GAAAA,IAAH,mLAYLG,EAAaH,EAAAA,GAAAA,GAAH,oK,+JCIVI,EAAkB,SAAAC,GAC7B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOf,EAAP,KAAagB,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOd,EAAP,KAAgBgB,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcL,EAAMM,IAAI,SADhB,wCAId,2FACEH,GAAW,GADb,mBAGuBI,EAAAA,EAAAA,IAAmBF,GAH1C,OAGUnB,EAHV,OAIIgB,EAAQhB,GAJZ,gDAMIsB,EAAAA,GAAAA,MAAY,kDANhB,yBAQIL,GAAW,GARf,6EAJc,sBAETE,GAFS,mCAedI,KACC,CAACT,IACG,CAAEb,QAAAA,EAASD,KAAAA,IAGPF,EAAoB,SAAA0B,GAC/B,OAAwBT,EAAAA,EAAAA,UAAS,MAAjC,eAAOf,EAAP,KAAagB,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOd,EAAP,KAAgBgB,EAAhB,KACQQ,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAP,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACED,GAAW,GADb,kBAGwBO,EAAQC,GAHhC,UAIyB,KADfE,EAHV,QAIcC,OAJd,yCAKa1B,QAAQ2B,SALrB,OAOIb,EAAQW,GAPZ,kDASIL,EAAAA,GAAAA,MAAY,6CAThB,yBAWIL,GAAW,GAXf,8EADc,uBAAC,WAAD,wBAeda,KACC,CAACN,EAASC,IACN,CAAExB,QAAAA,EAASD,KAAAA,EAAMyB,QAAAA,K,kLCtE1BM,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAG,mCAQF,SAAeX,EAAtB,+CAAO,OAAP,oBAAO,WAAkCF,GAAlC,yFACkBY,IAAAA,IAAA,+BACGC,EADH,4DAC0Db,IAF5E,cACCc,EADD,OAICC,EAASD,EAASjC,KAAKmC,QAJxB,kBAMED,GANF,kEASA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCX,GAAjC,yFACkBM,IAAAA,IAAA,gBAAmBN,EAAnB,oBAAsCO,IADxD,cACCC,EADD,gBAEeA,EAASjC,KAFxB,cAEC2B,EAFD,yBAGEA,GAHF,kEAMA,SAAe5B,EAAtB,+CAAO,OAAP,oBAAO,WAA0B0B,GAA1B,yFACkBM,IAAAA,IAAA,gBAAmBN,EAAnB,4BAA8CO,IADhE,cACCC,EADD,gBAEcA,EAASjC,KAAKqC,KAF5B,cAECA,EAFD,yBAGEA,GAHF,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4Bb,GAA5B,yFACkBM,IAAAA,IAAA,gBAAmBN,EAAnB,4BAA8CO,IADhE,cACCC,EADD,gBAEiBA,EAASjC,KAAKmC,QAF/B,cAECI,EAFD,yBAGEA,GAHF,oE","sources":["components/FotoCard/FotoCard.jsx","components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","components/MovieInfo/MovieInfo.styled.jsx","hooks/hooks.js","moviesApi/moviesApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport NoImg from 'helpers/ImageNotFound.jpg';\nimport { Thumb } from 'components/MovieInfo/MovieInfo.styled';\n\nexport const FotoCard = ({ name, src, character }) => {\n  return (\n    <li>\n      <Thumb>\n        <img\n          alt={name}\n          src={\n            src === null ? `${NoImg}` : `https://image.tmdb.org/t/p/w300${src}`\n          }\n        />\n      </Thumb>\n      <div>\n        <h3>{name}</h3>\n        <p>Character: {character}</p>\n      </div>\n    </li>\n  );\n};\n\nFotoCard.propTypes = {\n  src: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","import Loader from 'components/Loader/Loader';\nimport { CastList } from 'components/Cast';\nimport { FotoCard } from 'components/FotoCard';\nimport { useFetchMovieInfo } from 'hooks';\nimport { movieCasts } from 'moviesApi';\n\nexport const Cast = () => {\n  const { data, loading } = useFetchMovieInfo(movieCasts);\n  console.dir(data);\n  return (\n    <>\n      {loading && <Loader />}\n      {data && (\n        <CastList>\n          {data.map(({ cast_id, profile_path, name, character }) => (\n            <FotoCard\n              key={cast_id}\n              name={name}\n              src={profile_path}\n              character={character}\n            />\n          ))}\n        </CastList>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 0;\n`;\n","import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  text-align: justify;\n  @media screen and (min-width: 768px) {\n    display: flex;\n    gap: 15px;\n  }\n`;\n\nexport const Thumb = styled.div`\n  width: 300px;\n  height: 450px;\n  margin: auto;\n  object-fit: contain;\n  & img {\n    width: inherit;\n    height: auto;\n    overflow: hidden;\n  }\n`;\n\nexport const MovieTitle = styled.h1`\n  @media screen and (max-width: 767px) {\n    text-align: center;\n  }\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchTrendingMovies, fetchMoviesOnQuery } from 'moviesApi';\nimport { toast } from 'react-toastify';\n\nexport const useFetchMovies = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function getTrendingMovies() {\n      setLoading(true);\n      try {\n        const data = await fetchTrendingMovies(1);\n        setItems(data);\n      } catch (error) {\n        toast.error('The resource could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getTrendingMovies();\n  }, []);\n  return { items, loading };\n};\n\nexport const useFetchByQuery = query => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const searchQuery = query.get('query');\n    if (!searchQuery) return;\n\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const data = await fetchMoviesOnQuery(searchQuery);\n        setData(data);\n      } catch (error) {\n        toast.error('The resource you requested could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovies();\n  }, [query]);\n  return { loading, data };\n};\n\nexport const useFetchMovieInfo = dataAPI => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      setLoading(true);\n      try {\n        const movie = await dataAPI(movieId);\n        if (movie.length === 0) {\n          return console.error();\n        }\n        setData(movie);\n      } catch (error) {\n        toast.error('The resource you requested not exist yet.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieDetails();\n  }, [dataAPI, movieId]);\n  return { loading, data, movieId };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = `6c934d67464856a6476afafcb7e85695`;\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const movies = response.data.results;\n  return movies;\n}\n\nexport async function fetchMoviesOnQuery(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  const movies = response.data.results;\n\n  return movies;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = await axios.get(`movie/${movieId}?api_key=${KEY}`);\n  const movie = await response.data;\n  return movie;\n}\n\nexport async function movieCasts(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  const cast = await response.data.cast;\n  return cast;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  const reviews = await response.data.results;\n  return reviews;\n}\n"],"names":["FotoCard","name","src","character","alt","NoImg","Cast","useFetchMovieInfo","movieCasts","data","loading","console","dir","Loader","CastList","map","cast_id","profile_path","styled","Wraper","Thumb","MovieTitle","useFetchByQuery","query","useState","setData","setLoading","useEffect","searchQuery","get","fetchMoviesOnQuery","toast","getMovies","dataAPI","movieId","useParams","movie","length","error","getMovieDetails","axios","KEY","response","movies","results","fetchMovieDetails","cast","movieReviews","reviews"],"sourceRoot":""}