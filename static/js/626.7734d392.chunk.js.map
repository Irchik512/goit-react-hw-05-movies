{"version":3,"file":"static/js/626.7734d392.chunk.js","mappings":"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","sources":["components/GalleryItem/GalleryItem.jsx","components/GalleryItem/GalleryItem.styled.jsx","components/Gallery/Gallery.jsx","components/Gallery/Gallery.styled.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","components/Section/Section.jsx","components/Section/Section.styled.jsx","hooks/hooks.js","moviesApi/moviesApi.js","components/SearchForm/SearchForm.jsx","components/SearchForm/SearchForm.styled.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport NoImg from 'helpers/ImageNotFound.jpg';\nimport { Thumb } from 'components/MovieInfo';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MovieItem,\n  ItemLink,\n  ItemImage,\n  ItemTitle,\n} from 'components/GalleryItem';\n\nexport function GalleryItem({ alt, src, title, id }) {\n  const location = useLocation();\n  return (\n    <MovieItem>\n      <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n        <Thumb>\n          <ItemImage\n            src={\n              src !== null\n                ? `https://image.tmdb.org/t/p/w300${src}`\n                : `${NoImg}`\n            }\n            alt={alt}\n          />\n        </Thumb>\n        <ItemTitle>{title}</ItemTitle>\n      </ItemLink>\n    </MovieItem>\n  );\n}\n\nGalleryItem.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieItem = styled.li`\n  max-width: 300px;\n  overflow: hidden;\n`;\nexport const ItemLink = styled(Link)`\n  width: 100%;\n  height: inherit;\n  align-items: center;\n  text-decoration: none;\n  color: black;\n`;\nexport const ItemImage = styled.img`\n  display: block;\n  object-fit: contain;\n`;\nexport const ItemTitle = styled.p`\n  margin: 10px 0 0;\n  text-wrap: wrap;\n`;\n","import PropTypes from 'prop-types';\nimport { GalleryItem } from 'components/GalleryItem';\nimport { MoviesGallery } from 'components/Gallery';\n\nexport function Gallery({ movies, onClick }) {\n  return (\n    <MoviesGallery onClick={onClick}>\n      {movies.map(movie => (\n        <GalleryItem\n          key={movie.id}\n          alt={movie.original_title}\n          src={movie.poster_path}\n          title={movie.title}\n          id={movie.id}\n        />\n      ))}\n    </MoviesGallery>\n  );\n}\n\nGallery.defaultProps = {\n  onClick: () => null,\n};\n\nGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n  onClick: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const MoviesGallery = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  padding: 0;\n  margin: 10px 0 20 0;\n`;\n","import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  text-align: justify;\n  @media screen and (min-width: 768px) {\n    display: flex;\n    gap: 15px;\n  }\n`;\n\nexport const Thumb = styled.div`\n  width: 300px;\n  height: 450px;\n  margin: auto;\n  object-fit: contain;\n  & img {\n    width: inherit;\n    height: auto;\n    overflow: hidden;\n  }\n`;\n\nexport const MovieTitle = styled.h1`\n  @media screen and (max-width: 767px) {\n    text-align: center;\n  }\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport NoImg from 'helpers/ImageNotFound.jpg';\nimport { Wraper, Thumb, MovieTitle } from 'components/MovieInfo';\n\nexport const MovieInfo = ({\n  movie: {\n    title,\n    poster_path,\n    release_date,\n    vote_average,\n    overview,\n    genres = [],\n  },\n}) => {\n  return (\n    <Wraper>\n      <Thumb>\n        <img\n          alt={title}\n          src={\n            poster_path === null\n              ? `${NoImg}`\n              : `https://image.tmdb.org/t/p/w300${poster_path}`\n          }\n        />\n      </Thumb>\n      <div>\n        <MovieTitle>\n          {title} {release_date && `(${release_date})`}\n        </MovieTitle>\n        <p>User score: {(vote_average * 10).toFixed(2) + '% '}</p>\n        <h2> Overview</h2>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p> {genres.map(genre => genre.name + ' ')} </p>\n      </div>\n    </Wraper>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n      .isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ).isRequired,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Section, Title, Container } from 'components/Section';\n\nexport const Sections = ({ title, children }) => {\n  return (\n    <Section>\n      <Container>\n        {title && <Title>{title}</Title>}\n        {children}\n      </Container>\n    </Section>\n  );\n};\n\nSections.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 8px 0px;\n  width: 100%;\n  font-family: sans-serif;\n`;\nexport const Container = styled.div`\n  box-sizing: border-box;\n  padding: 0 30px;\n  width: 100%;\n  text-align: center;\n`;\n\nexport const Title = styled.h1`\n  margin-block-end: 0;\n  margin-block-start: 0;\n  margin: 0;\n  font-size: 35px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchTrendingMovies, fetchMoviesOnQuery } from 'moviesApi';\nimport { toast } from 'react-toastify';\n\nexport const useFetchMovies = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function getTrendingMovies() {\n      setLoading(true);\n      try {\n        const data = await fetchTrendingMovies(1);\n        setItems(data);\n      } catch (error) {\n        toast.error('The resource could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getTrendingMovies();\n  }, []);\n  return { items, loading };\n};\n\nexport const useFetchByQuery = query => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const searchQuery = query.get('query');\n    if (!searchQuery) return;\n\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const data = await fetchMoviesOnQuery(searchQuery);\n        setData(data);\n      } catch (error) {\n        toast.error('The resource you requested could not be found.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovies();\n  }, [query]);\n  return { loading, data };\n};\n\nexport const useFetchMovieInfo = dataAPI => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      setLoading(true);\n      try {\n        const movie = await dataAPI(movieId);\n        if (movie.length === 0) {\n          return console.error();\n        }\n        setData(movie);\n      } catch (error) {\n        toast.error('The resource you requested not exist yet.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieDetails();\n  }, [dataAPI, movieId]);\n  return { loading, data, movieId };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = `6c934d67464856a6476afafcb7e85695`;\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const movies = response.data.results;\n  return movies;\n}\n\nexport async function fetchMoviesOnQuery(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  const movies = response.data.results;\n\n  return movies;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = await axios.get(`movie/${movieId}?api_key=${KEY}`);\n  const movie = await response.data;\n  return movie;\n}\n\nexport async function movieCasts(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  const cast = await response.data.cast;\n  return cast;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  const reviews = await response.data.results;\n  return reviews;\n}\n","import { useState } from 'react';\nimport { BiSearch } from 'react-icons/bi';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport {\n  FindMovieForm,\n  FindMovieInput,\n  FindMovieButton,\n} from 'components/SearchForm';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChange = e => {\n    setSearchQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const trimQuery = searchQuery.trim();\n    if (trimQuery === '') {\n      return toast.error('There is nothing to find. Try again!', {\n        theme: 'colored',\n      });\n    }\n    onSubmit(trimQuery);\n    setSearchQuery('');\n  };\n\n  return (\n    <FindMovieForm className=\"searchForm\" onSubmit={handleSubmit}>\n      <FindMovieButton type=\"submit\" className=\"searchForm-button\">\n        <BiSearch></BiSearch>\n      </FindMovieButton>\n\n      <FindMovieInput\n        className=\"searchForm-input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Enter movies name\"\n        value={searchQuery}\n        onChange={handleChange}\n      />\n    </FindMovieForm>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const FindMovieForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n  background-color: #fff;\n  border: 1px solid;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const FindMovieInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 4px;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\nexport const FindMovieButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  .searchForm-button-label {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    clip-path: inset(50%);\n    border: 0;\n  }\n`;\n","import Loader from 'components/Loader/Loader';\nimport { Gallery } from 'components/Gallery';\nimport { Sections } from 'components/Section';\nimport { SearchForm } from 'components/SearchForm';\nimport { useSearchParams } from 'react-router-dom';\nimport { useFetchByQuery } from 'hooks';\n\nexport const MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const { data, loading } = useFetchByQuery(searchParams);\n  const onSubmit = searchQuery => {\n    setSearchParams({ query: searchQuery });\n  };\n\n  return (\n    <Sections>\n      <SearchForm onSubmit={onSubmit} />\n      {loading && <Loader />}\n      {data && <Gallery movies={data} />}\n    </Sections>\n  );\n};\n"],"names":["GalleryItem","alt","src","title","id","location","useLocation","MovieItem","ItemLink","to","state","from","ItemImage","NoImg","ItemTitle","styled","Link","Gallery","movies","onClick","MoviesGallery","map","movie","original_title","poster_path","defaultProps","Wraper","Thumb","MovieTitle","MovieInfo","release_date","vote_average","overview","genres","toFixed","genre","name","Sections","children","Section","Container","Title","useFetchByQuery","query","useState","data","setData","loading","setLoading","useEffect","searchQuery","get","fetchMoviesOnQuery","toast","getMovies","useFetchMovieInfo","dataAPI","movieId","useParams","length","console","error","getMovieDetails","axios","KEY","response","results","fetchMovieDetails","movieCasts","cast","movieReviews","reviews","SearchForm","onSubmit","setSearchQuery","FindMovieForm","className","e","preventDefault","trimQuery","trim","theme","FindMovieButton","type","FindMovieInput","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","MoviesPage","useSearchParams","searchParams","setSearchParams","Loader"],"sourceRoot":""}